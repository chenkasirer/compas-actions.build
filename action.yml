name: "compas-actions.build"
description: "Build and test COMPAS or its plugins"

inputs:
  test_lint:
    description: "whether to test lint errors"
    required: true
    default: "false"
  test_compas:
    description: "whether to test with python -m compas"
    required: true
    default: "false"
  use_conda:
    description: "whether to build with conda"
    required: false
    default: "false"
  python:
    description: "which python version to build with"
    required: true
    default: "3.10"

runs:
  using: "composite"
  steps:

    - uses: actions/checkout@v3

    # Build as PYPI package.
    - if: inputs.use_conda == 'false'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python }}
    
    - if: inputs.use_conda == 'false'
      shell: bash
      run: |
        echo "This is a PYPI package."

        python -m pip install --upgrade pip
        pip install cython --install-option='--no-cython-compile'
        pip install --no-cache-dir -r requirements-dev.txt

        if [[ ${{ inputs.test_lint }} = "true" ]]; then
          invoke lint
        fi;

        if [[ ${{ inputs.test_compas }} = "true" ]]; then
          python -m compas
        fi;
        
        invoke test

    # Build as conda package.
    - if: inputs.use_conda == 'true'
      uses: conda-incubator/setup-miniconda@v2.0.0
      with:
        miniconda-version: latest
        channels: conda-forge

    - if: inputs.use_conda == 'true'
      shell: bash -l {0}
      run: |
        if [[ ${{ runner.os }} == "Windows" && -f env_win.yml ]]; then
          conda env create -f env_win.yml -n compas-build python=${{ inputs.python }}
          conda activate compas-build
        elif [[ ${{ runner.os }} == "macOS" && -f env_osx.yml ]]; then
          conda env create -f env_osx.yml -n compas-build python=${{ inputs.python }}
          conda activate compas-build
        elif [[ ${{ runner.os }} == "Linux" && -f env_linux.yml ]]; then
          conda env create -f env_linux.yml -n compas-build python=${{ inputs.python }}
          conda activate compas-build
        elif [[ -f environment.yml ]]; then
          conda env create -f environment.yml -n compas-build python=${{ inputs.python }}
          conda activate compas-build
        fi

        echo "This is a conda package."

        if [[ ${{ inputs.test_lint }} = "true" ]]; then
          invoke lint
        fi;

        if [[ ${{ inputs.test_compas }} = "true" ]]; then
          python -m compas
        fi;
        
        invoke test
